{"version":3,"file":"fallbackauthdialog.js","sourceRoot":"","sources":["../../../src/helpers/fallbackauthdialog.js"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft. All rights reserved. Licensed under the MIT license. See full license in root of repo. -->\n *\n * This file shows how to use MSAL.js to get an access token to your server and pass it to the task pane.\n */\n\n/* global console, localStorage, location, Office, window */\n\nimport { LogLevel, PublicClientApplication } from \"@azure/msal-browser\";\n//import { getUserData } from \"./middle-tier-calls\";\nimport { showMessage } from \"./message-helper\";\n\nconst clientId = \"121964d0-6350-438e-b38a-54bfedab82bf\"; //This is your client ID\n//const accessScope = `api://${window.location.host}/${clientId}/access_as_user`;\nconst loginRequest = {\n  scopes: [\"user.read\"],\n  //extraScopesToConsent: [\"user.read\"],\n};\n\nconst msalConfig = {\n  auth: {\n    clientId: clientId,\n    authority: \"https://login.microsoftonline.com/common\",\n    redirectUri: `https://${window.location.host}/fallbackauthdialog.html`, // Update config script to enable `https://${window.location.host}/fallbackauthdialog.html`,\n    navigateToLoginRequestUrl: false,\n  },\n  cache: {\n    cacheLocation: \"localStorage\", // Needed to avoid \"User login is required\" error.\n    storeAuthStateInCookie: true, // Recommended to avoid certain IE/Edge issues.\n  },\n  system: {\n    loggerOptions: {\n      loggerCallback: (level, message, containsPii) => {\n        if (containsPii) {\n          return;\n        }\n        switch (level) {\n          case LogLevel.Error:\n            console.error(message);\n            return;\n          case LogLevel.Info:\n            console.info(message);\n            return;\n          case LogLevel.Verbose:\n            console.debug(message);\n            return;\n          case LogLevel.Warning:\n            console.warn(message);\n            return;\n        }\n      },\n    },\n  },\n};\n\nconst publicClientApp = new PublicClientApplication(msalConfig);\n\nlet loginDialog = null;\nlet homeAccountId = null;\nlet callbackFunction = null;\n\nOffice.onReady(() => {\n  if (Office.context.ui.messageParent) {\n    publicClientApp\n      .handleRedirectPromise()\n      .then(handleResponse)\n      .catch((error) => {\n        console.log(error);\n        Office.context.ui.messageParent(JSON.stringify({ status: \"failure\", result: error }));\n      });\n\n    // The very first time the add-in runs on a developer's computer, msal.js hasn't yet\n    // stored login data in localStorage. So a direct call of acquireTokenRedirect\n    // causes the error \"User login is required\". Once the user is logged in successfully\n    // the first time, msal data in localStorage will prevent this error from ever hap-\n    // pening again; but the error must be blocked here, so that the user can login\n    // successfully the first time. To do that, call loginRedirect first instead of\n    // acquireTokenRedirect.\n    if (localStorage.getItem(\"loggedIn\") === \"yes\") {\n      publicClientApp.acquireTokenRedirect(loginRequest);\n    } else {\n      // This will login the user and then the (response.tokenType === \"id_token\")\n      // path in authCallback below will run, which sets localStorage.loggedIn to \"yes\"\n      // and then the dialog is redirected back to this script, so the\n      // acquireTokenRedirect above runs.\n      publicClientApp.loginRedirect(loginRequest);\n    }\n  }\n});\n\nfunction handleResponse(response) {\n  if (response.tokenType === \"id_token\") {\n    console.log(\"LoggedIn\");\n    localStorage.setItem(\"loggedIn\", \"yes\");\n  } else {\n    console.log(\"token type is:\" + response.tokenType);\n    Office.context.ui.messageParent(\n      JSON.stringify({ status: \"success\", result: response, accountId: response.account.homeAccountId })\n    );\n  }\n}\n\nexport async function dialogFallback(callback) {\n  // Attempt to acquire token silently if user is already signed in.\n  if (homeAccountId !== null) {\n    const result = await publicClientApp.acquireTokenSilent(loginRequest);\n    if (result !== null && result.accessToken !== null) {\n      console.log(\"getting userdata2\");\n\n      // const response = await getUserData(result.accessToken);\n      console.log(\"getting sso token:\", result);\n      callbackFunction(result);\n    }\n  } else {\n    callbackFunction = callback;\n\n    // We fall back to Dialog API for any error.\n    const url = \"/fallbackauthdialog.html\";\n    showLoginPopup(url);\n  }\n}\n\nexport async function dialogFallback2(callback) {\n  // // Attempt to acquire token silently if user is already signed in.\n  // if (homeAccountId !== null) {\n  //   const result = await publicClientApp.acquireTokenSilent(loginRequest);\n  //   if (result !== null && result.accessToken !== null) {\n  //     const response = await getUserData(result.accessToken);\n  //     callbackFunction(response);\n  //   }\n  // } else {\n  callbackFunction = callback;\n\n  // We fall back to Dialog API for any error.\n  const url = \"/fallbackauthdialog.html\";\n  showLoginPopup(url);\n  // }\n}\n\n// This handler responds to the success or failure message that the pop-up dialog receives from the identity provider\n// and access token provider.\nasync function processMessage(arg) {\n  // Uncomment to view message content in debugger, but don't deploy this way since it will expose the token.\n  //console.log(\"Message received in processMessage: \" + JSON.stringify(arg));\n\n  let messageFromDialog = JSON.parse(arg.message);\n  console.log(\"procmessage\", arg);\n\n  if (messageFromDialog.status === \"success\") {\n    // We now have a valid access token.\n    loginDialog.close();\n\n    // Configure MSAL to use the signed-in account as the active account for future requests.\n    // const homeAccount = publicClientApp.getAccountByHomeId(messageFromDialog.accountId);\n    // if (homeAccount) {\n    //   homeAccountId = messageFromDialog.accountId; // Track the account id for future silent token requests.\n    //   publicClientApp.setActiveAccount(homeAccount);\n    // }\n\n    //const response = await getUserData(messageFromDialog.result);\n    callbackFunction(arg);\n  } else if (messageFromDialog.error === undefined && messageFromDialog.result.errorCode === undefined) {\n    // Need to pick the user to use to auth\n  } else {\n    // Something went wrong with authentication or the authorization of the web application.\n    loginDialog.close();\n    console.log(\"proc err\", messageFromDialog);\n    if (messageFromDialog.error) {\n      showMessage(JSON.stringify(messageFromDialog.error.toString()));\n    } else if (messageFromDialog.result) {\n      showMessage(JSON.stringify(messageFromDialog.result.errorMessage.toString()));\n    }\n  }\n}\n\n// Use the Office dialog API to open a pop-up and display the sign-in page for the identity provider.\nfunction showLoginPopup(url) {\n  var fullUrl = location.protocol + \"//\" + location.hostname + (location.port ? \":\" + location.port : \"\") + url;\n\n  // height and width are percentages of the size of the parent Office application, e.g., PowerPoint, Excel, Word, etc.\n  Office.context.ui.displayDialogAsync(fullUrl, { height: 60, width: 30 }, function (result) {\n    // console.log(\"Dialog has initialized. Wiring up events\",result);\n    loginDialog = result.value;\n    loginDialog.addEventHandler(Office.EventType.DialogMessageReceived, processMessage);\n  });\n}\n"]}