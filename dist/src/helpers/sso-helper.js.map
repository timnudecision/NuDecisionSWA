{"version":3,"file":"sso-helper.js","sourceRoot":"","sources":["../../../src/helpers/sso-helper.js"],"names":[],"mappings":"AAAA;;;GAGG;;;;;IAOH,mBAAmB;IAEnB,IAAI,uBAAuB,GAAG,CAAC,CAAC;IAEzB,KAAK,UAAU,cAAc,CAAC,QAAQ;QAC3C,IAAI;YACF,IAAI,eAAe,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC;gBACrD,iBAAiB,EAAE,IAAI;gBACvB,kBAAkB,EAAE,IAAI;gBACxB,gBAAgB,EAAE,IAAI;aACvB,CAAC,CAAC;YACH,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;YAEjC,IAAI,QAAQ,GAAG,MAAM,IAAA,+BAAW,EAAC,eAAe,CAAC,CAAC;YAClD,IAAI,CAAC,QAAQ,EAAE;gBACb,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;aAC/C;iBAAM,IAAI,QAAQ,CAAC,MAAM,EAAE;gBAC1B,sFAAsF;gBACtF,sFAAsF;gBACtF,oCAAoC;gBACpC,IAAI,kBAAkB,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC;oBACxD,aAAa,EAAE,QAAQ,CAAC,MAAM;iBAC/B,CAAC,CAAC;gBACH,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;gBACjC,QAAQ,GAAG,IAAA,+BAAW,EAAC,kBAAkB,CAAC,CAAC;aAC5C;YAED,mFAAmF;YACnF,yBAAyB;YACzB,IAAI,QAAQ,CAAC,KAAK,EAAE;gBAClB,eAAe,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;aACrC;iBAAM;gBACL,QAAQ,CAAC,QAAQ,CAAC,CAAC;aACpB;SACF;QAAC,OAAO,SAAS,EAAE;YAClB,2FAA2F;YAC3F,4CAA4C;YAC5C,IAAI,SAAS,CAAC,IAAI,EAAE;gBAClB,IAAI,IAAA,sCAAsB,EAAC,SAAS,CAAC,EAAE;oBACrC,IAAA,sCAAc,EAAC,QAAQ,CAAC,CAAC;iBAC1B;aACF;iBAAM;gBACL,IAAA,4BAAW,EAAC,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;gBACvD,MAAM,SAAS,CAAC;aACjB;SACF;IACH,CAAC;IA1CD,wCA0CC;IAED,SAAS,eAAe,CAAC,QAAQ,EAAE,QAAQ;QACzC,iFAAiF;QACjF,2EAA2E;QAC3E,yFAAyF;QACzF,uFAAuF;QACvF,mCAAmC;QAEnC,IAAI,QAAQ,CAAC,iBAAiB,CAAC,OAAO,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,IAAI,uBAAuB,IAAI,CAAC,EAAE;YAC7F,uBAAuB,EAAE,CAAC;YAC1B,cAAc,CAAC,QAAQ,CAAC,CAAC;SAC1B;aAAM;YACL,IAAA,uCAAe,EAAC,QAAQ,CAAC,CAAC;SAC3B;IACH,CAAC;IAEM,KAAK,UAAU,QAAQ,CAAC,QAAQ;QAErC,IAAA,uCAAe,EAAC,QAAQ,CAAC,CAAC;IAE5B,CAAC;IAJD,4BAIC","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\nimport { dialogFallback, dialogFallback2 } from \"./fallbackauthdialog.js\";\nimport { getUserData } from \"./middle-tier-calls\";\nimport { showMessage } from \"./message-helper\";\nimport { handleClientSideErrors } from \"./error-handler\";\n\n/* global Office */\n\nlet retryGetMiddletierToken = 0;\n\nexport async function getUserProfile(callback) {\n  try {\n    let middletierToken = await Office.auth.getAccessToken({\n      allowSignInPrompt: true,\n      allowConsentPrompt: true,\n      forMSGraphAccess: true,\n    });\n    console.log('getting userdata3');\n\n    let response = await getUserData(middletierToken);\n    if (!response) {\n      throw new Error(\"Middle tier didn't respond\");\n    } else if (response.claims) {\n      // Microsoft Graph requires an additional form of authentication. Have the Office host\n      // get a new token using the Claims string, which tells AAD to prompt the user for all\n      // required forms of authentication.\n      let mfaMiddletierToken = await Office.auth.getAccessToken({\n        authChallenge: response.claims,\n      });\n      console.log('getting userdata1');\n      response = getUserData(mfaMiddletierToken);\n    }\n\n    // AAD errors are returned to the client with HTTP code 200, so they do not trigger\n    // the catch block below.\n    if (response.error) {\n      handleAADErrors(response, callback);\n    } else {\n      callback(response);\n    }\n  } catch (exception) {\n    // if handleClientSideErrors returns true then we will try to authenticate via the fallback\n    // dialog rather than simply throw and error\n    if (exception.code) {\n      if (handleClientSideErrors(exception)) {\n        dialogFallback(callback);\n      }\n    } else {\n      showMessage(\"EXCEPTION: \" + JSON.stringify(exception));\n      throw exception;\n    }\n  }\n}\n\nfunction handleAADErrors(response, callback) {\n  // On rare occasions the middle tier token is unexpired when Office validates it,\n  // but expires by the time it is sent to AAD for exchange. AAD will respond\n  // with \"The provided value for the 'assertion' is not valid. The assertion has expired.\"\n  // Retry the call of getAccessToken (no more than once). This time Office will return a\n  // new unexpired middle tier token.\n\n  if (response.error_description.indexOf(\"AADSTS500133\") !== -1 && retryGetMiddletierToken <= 0) {\n    retryGetMiddletierToken++;\n    getUserProfile(callback);\n  } else {\n    dialogFallback2(callback);\n  }\n}\n\nexport async function ShowDial(callback)\n{\n  dialogFallback2(callback);\n\n}\n"]}