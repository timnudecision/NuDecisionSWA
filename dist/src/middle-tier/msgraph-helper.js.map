{"version":3,"file":"msgraph-helper.js","sourceRoot":"","sources":["../../../src/middle-tier/msgraph-helper.js"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft. All rights reserved. Licensed under the MIT license. See full license in the root of the repo.\n/*\n    This file provides the provides functionality to get Microsoft Graph data.\n*/\nimport * as https from \"https\";\nimport { getAccessToken } from \"./ssoauth-helper\";\nimport * as createError from \"http-errors\";\n\n/* global process */\n\nconst domain = \"graph.microsoft.com\";\nconst version = \"v1.0\";\n\nexport async function getUserData(req, res, next) {\n  const authorization = req.get(\"Authorization\");\n\n  await getAccessToken(authorization)\n    .then(async (graphTokenResponse) => {\n      if (graphTokenResponse && (graphTokenResponse.claims || graphTokenResponse.error)) {\n        res.send(graphTokenResponse);\n      } else {\n        const graphToken = graphTokenResponse.access_token;\n        const graphUrlSegment = process.env.GRAPH_URL_SEGMENT || \"/me\";\n        const graphQueryParamSegment = process.env.QUERY_PARAM_SEGMENT || \"\";\n\n        const graphData = await getGraphData(graphToken, graphUrlSegment, graphQueryParamSegment);\n\n        // If Microsoft Graph returns an error, such as invalid or expired token,\n        // there will be a code property in the returned object set to a HTTP status (e.g. 401).\n        // Relay it to the client. It will caught in the fail callback of `makeGraphApiCall`.\n        if (graphData.code) {\n          next(createError(graphData.code, \"Microsoft Graph error \" + JSON.stringify(graphData)));\n        } else {\n          res.send(graphData);\n        }\n      }\n    })\n    .catch((err) => {\n      res.status(401).send(err.message);\n      return;\n    });\n}\n\nexport async function getGraphData(accessToken, apiUrl, queryParams) {\n  return new Promise((resolve, reject) => {\n    const options = {\n      host: domain,\n      path: \"/\" + version + apiUrl + queryParams,\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: \"Bearer \" + accessToken,\n        \"Cache-Control\": \"private, no-cache, no-store, must-revalidate\",\n        Expires: \"-1\",\n        Pragma: \"no-cache\",\n      },\n    };\n\n    https\n      .get(options, (response) => {\n        let body = \"\";\n        response.on(\"data\", (d) => {\n          body += d;\n        });\n        response.on(\"end\", () => {\n          // The response from the OData endpoint might be an error, say a\n          // 401 if the endpoint requires an access token and it was invalid\n          // or expired. But a message is not an error in the call of https.get,\n          // so the \"on('error', reject)\" line below isn't triggered.\n          // So, the code distinguishes success (200) messages from error\n          // messages and sends a JSON object to the caller with either the\n          // requested OData or error information.\n\n          let error;\n          if (response.statusCode === 200) {\n            let parsedBody = JSON.parse(body);\n            resolve(parsedBody);\n          } else {\n            error = new Error();\n            error.code = response.statusCode;\n            error.message = response.statusMessage;\n\n            // The error body sometimes includes an empty space\n            // before the first character, remove it or it causes an error.\n            body = body.trim();\n            error.bodyCode = JSON.parse(body).error.code;\n            error.bodyMessage = JSON.parse(body).error.message;\n            resolve(error);\n          }\n        });\n      })\n      .on(\"error\", reject);\n  });\n}\n"]}