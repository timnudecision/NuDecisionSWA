{"version":3,"file":"ssoauth-helper.js","sourceRoot":"","sources":["../../../src/middle-tier/ssoauth-helper.js"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft. All rights reserved. Licensed under the MIT license. See full license in root of repo. -->\n *\n * This file defines the routes within the authRoute router.\n */\n\nimport fetch from \"node-fetch\";\nimport form from \"form-urlencoded\";\nimport jwt from \"jsonwebtoken\";\nimport { JwksClient } from \"jwks-rsa\";\n\n/* global process, console */\n\nconst DISCOVERY_KEYS_ENDPOINT = \"https://login.microsoftonline.com/common/discovery/v2.0/keys\";\n\nexport async function getAccessToken(authorization) {\n  if (!authorization) {\n    let error = new Error(\"No Authorization header was found.\");\n    return Promise.reject(error);\n  } else {\n    const scopeName = process.env.SCOPE || \"User.Read\";\n    const [, /* schema */ assertion] = authorization.split(\" \");\n\n    const tokenScopes = jwt.decode(assertion).scp.split(\" \");\n    const accessAsUserScope = tokenScopes.find((scope) => scope === \"access_as_user\");\n    if (!accessAsUserScope) {\n      throw new Error(\"Missing access_as_user\");\n    }\n\n    const formParams = {\n      client_id: process.env.CLIENT_ID,\n      client_secret: process.env.CLIENT_SECRET,\n      grant_type: \"urn:ietf:params:oauth:grant-type:jwt-bearer\",\n      assertion: assertion,\n      requested_token_use: \"on_behalf_of\",\n      scope: [scopeName].join(\" \"),\n    };\n\n    const stsDomain = \"https://login.microsoftonline.com\";\n    const tenant = \"common\";\n    const tokenURLSegment = \"oauth2/v2.0/token\";\n    const encodedForm = form(formParams);\n\n    const tokenResponse = await fetch(`${stsDomain}/${tenant}/${tokenURLSegment}`, {\n      method: \"POST\",\n      body: encodedForm,\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n      },\n    });\n    const json = await tokenResponse.json();\n    return json;\n  }\n}\n\nexport function validateJwt(req, res, next) {\n  const authHeader = req.headers.authorization;\n  if (authHeader) {\n    const token = authHeader.split(\" \")[1];\n\n    const validationOptions = {\n      audience: process.env.CLIENT_ID,\n    };\n\n    jwt.verify(token, getSigningKeys, validationOptions, (err) => {\n      if (err) {\n        console.log(err);\n        return res.sendStatus(403);\n      }\n\n      next();\n    });\n  }\n}\n\nfunction getSigningKeys(header, callback) {\n  var client = new JwksClient({\n    jwksUri: DISCOVERY_KEYS_ENDPOINT,\n  });\n\n  client.getSigningKey(header.kid, function (err, key) {\n    callback(null, key.getPublicKey());\n  });\n}\n"]}